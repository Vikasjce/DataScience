# Download Files from a link
file_url <- "https://data.baltimorecity.gov/api/views/aqgr-xx9h/rows.csv?accessType=DOWNLOAD" # Url of the file in a variable 
download.file(file_url,destfile = "./Data/cameras.csv", method="curl") # Download Command to create a file in the local 
list.files("./Data") # Check the file in the local 

# Using read table to get the data into the RAM for the downloaded file 
cameras <- read.table(file = "./Data/cameras.csv",header = TRUE , sep = ",") # read table can read any data but required extra inputs
head(cameras)

# Using read table to get the data into the RAM for the downloaded file 
cameras <- read.table(file = "./Data/cameras.csv",header = TRUE , sep = ",") # read table can read any data but required extra inputs
head(cameras)

# Read a csv file using csv command 
cameras <- read.csv("./Data/cameras.csv") # Automatically sets delimeter as , and Header TRUE 
head(cameras)

?read.table
quote- Is there a quote in the values 
nrows- number of rows to be selected
na.strings - set the character that represents the missing value
skip - number of lines to skip before starting to read 

# Using the data to copy from Internet
if(!file.exists("./Data")){dir.create("./Data")}
file_url <- "https://data.baltimorecity.gov/api/views/aqgr-xx9h/rows.csv?accessType=DOWNLOAD"
download.file(file_url,destfile = "./Data/cameras.xlsx", method="curl")
dateDownloaded <- date()
list.files("./Data")

# Read the data from xlsx check also XLConnect vignette to check more on XL connect 
install.packages("xlsx")
library(xlsx)
cameras <- read.xlsx("./Data/cameras.xlsx", sheetIndex = 1,header = TRUE)
head(cameras)

# Read the data from XML
install.packages("XML")
library(XML)
file_url <-  "https://www.w3schools.com/xml/simple.xml"
doc <-  xmlTreeParse(file_url,useInternal = TRUE) # Parses the XML tree into Doc
rootNode <- xmlRoot(doc)  # Finds the root node of the doc
xmlName(rootNode) # Tells what is the name of the root node
names(rootNode) # Tells all the subnodes and their names 
rootNode[[1]] # Access the First element 
rootNode[[1]][[1]] # Access the element 1 level lower
xmlSApply(rootNode,xmlValue) #Parses all the Values of the nodes
xpathSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//price",xmlValue)
-- update the Baltimore data 



